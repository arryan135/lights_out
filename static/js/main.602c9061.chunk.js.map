{"version":3,"sources":["Cell.js","Board.js","App.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","i","nrows","row","j","ncols","push","Math","random","chanceLightStartsOn","coord","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","y","x","flipCell","every","cell","setState","curState","_this2","tblBoard","_loop","concat","src_Cell_0","key","flipCellsAround","defaultProps","App","src_Board_0","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.602c9061.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  }\n  constructor(props) {\n    super(props);\n    // TODO: set initial state\n    this.state = {hasWon: false, board: this.createBoard()};\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let i =  0; i < this.props.nrows; i++){\n      let row = [];\n      for (let j = 0; j < this.props.ncols; j++){\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(y,x)\n    flipCell(y - 1, x);\n    flipCell(y + 1, x);\n    flipCell(y, x - 1);\n    flipCell(y, x + 1);\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    let hasWon = board.every(row => row.every(cell => !cell));\n    this.setState( (curState) =>  ({board: curState.board, hasWon: hasWon}));\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    if (this.state.hasWon){\n      return (\n        <div className = \"Board-title\">\n          <div className = \"winner\">\n            <span className = \"neon-orange\">YOU</span>\n            <span className = \"neon-blue\">WIN!</span>\n          </div>\n        </div>\n      )\n    }\n\n    // TODO\n\n    // make table board\n\n    // TODO\n    let tblBoard = [];\n    for (let i = 0; i < this.props.nrows; i++){\n      let row = [];\n      for (let j = 0; j < this.props.ncols; j++){\n        let coord = `${i}-${j}`;\n        row.push(<Cell isLit = {this.state.board[i][j]} key = {coord} flipCellsAroundMe = {() => this.flipCellsAround(coord)} />)\n      }\n      tblBoard.push(<tr key = {i} >{row}</tr>)\n    }\n    return (\n      <div>\n        <div className = \"Board-title\">\n          <div className = \"neon-orange\">Lights</div>\n          <div className = \"neon-blue\">Out</div>\n        </div>\n        <table className = \"Board\"> \n          <tbody>\n            {tblBoard}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below.\n// serviceWorker.unregister();\n"],"sourceRoot":""}